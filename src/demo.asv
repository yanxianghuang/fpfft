% demo on compare the errors in (2048-point) fixed-point FFT
% created by Yanxiang on 16, Spet, 2016
% yanxiang.huang@imec.be


%% 1. input
figure(1);
in = ((rand(1,2048)-0.5).*2);
%in = (sin(1:2048));
subplot(5,1,1);
plot(in);
title('input');
systematic_comparison = true;


%% 2. my fixed_point, using the generated c-mex file
input_frac = 11; %% It is tested the result is correct until input_frac = 32, which is way sufficent
tw_frac = input_frac-5; %% It is tested the result is correct until tw_frac = 16, which is way sufficient

% IMPORTANT SIZE INFORMATION !!!!!!!!!!!!!!!!!!
% the bit_width of input is calculated as input_frac + input_integer
% i) input_integer is :  " ceil(  log2( max(abs(real(in))) +1e-3  )  )  +1 "
% so for QAM_256, the maximum value is 15, therefore input_integer is
% log2(15) + 1 = 5
% ii) in the example above, input are in [1, -1], so input_integer = 2;
% so the realistic-size of you data are input_frac + 2;

% similiar is for the twidder factor of FFT, However, as the range of tw is
% always [-1, 1], the tw_integer is 2 ( log2(1+1e-3) + 1; note the +1e-3),
% so its size is always tw_frac+2

tic;
out1 = fix_fft2k(in, input_frac, tw_frac); % easy to use: complex input, input_frac_size, tw_frac size 
toc;
subplot(5,1,2);
plot( fftshift(abs(fft(in)) ));
title('Perfect FFT output');

subplot(5,1,3);
plot( fftshift(abs(out1) ));
title('My FFT output');



subplot(5,1,4);
my_error = fftshift( abs(out1)-abs(fft(in)) );
plot( my_error );
title('My FFT error');
fprintf(sprintf('\t\t\t\t\tMy FFT rms error %f \n', rms(my_error)));


%% 3. quantize only input, this correspond to the .data approach
fixed_in = sfi(in, input_frac+2);
fixed_in = fixed_in.data;
tic;
out2 = fft(fixed_in); 
toc;
subplot(5,1,5);
fi_error = fftshift( abs(out2)-abs(fft(in)) );
plot( fi_error );
title('the only-quantize input FFT error');
fprintf(sprintf('\t\t\t\t\tFi FFT rms error %f \n', rms(fi_error)));



%% 4. systematic comparison (optional)

if systematic_comparison,
my_error_grid = 0;
fi_error_grid = 0;
for input_frac = 1:1:30,
    for tw_frac = 1:1:26,
        
        out1 = fix_fft2k(in, input_frac, tw_frac);
        my_error_grid(input_frac, tw_frac) = rms( fftshift( abs(out1)-abs(fft(in)) ) );
        
        fixed_in = sfi(in, input_frac+2);
        fixed_in = fixed_in.data;
        out2 = fft(fixed_in); 
        fi_error_grid(input_frac, tw_frac) = rms( fftshift( abs(out2)-abs(fft(in)) ) );
    end
end
 
figure(2);
contour( log10(my_error_grid) ); %% in log10 domain 
title('my fixed-point FFT error vs. input-size and tw-size');
xlabel('tw-frac size');
ylabel('input-frac size');
fprintf('You can find that in figure(2), the corners are almost always at input_frac = tw_frac+5, \nso keep that trend as the rule-of-thumb in your design.\n');

figure(3);
semilogy( fi_error_grid(:,1));
title('if only quantization input, fi.data FFT error decrease as input-size increase');
end
        




